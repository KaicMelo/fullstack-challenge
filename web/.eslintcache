[{"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\App.tsx":"1","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\reportWebVitals.ts":"2","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\routes.tsx":"3","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\index.tsx":"4","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\services\\api.ts":"5","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Login\\index.tsx":"6","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\assets\\components\\PageHeader\\index.tsx":"7","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\List\\index.tsx":"8","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Create\\index.tsx":"9","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Edit\\index.tsx":"10","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Delete\\index.tsx":"11"},{"size":183,"mtime":1611332143378,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1611348267792,"results":"14","hashOfConfig":"13"},{"size":720,"mtime":1611345649024,"results":"15","hashOfConfig":"13"},{"size":500,"mtime":1606692032245,"results":"16","hashOfConfig":"13"},{"size":121,"mtime":1611251117091,"results":"17","hashOfConfig":"13"},{"size":2698,"mtime":1611428446624,"results":"18","hashOfConfig":"13"},{"size":1249,"mtime":1611430086861,"results":"19","hashOfConfig":"13"},{"size":2684,"mtime":1611432865937,"results":"20","hashOfConfig":"13"},{"size":5287,"mtime":1611430358032,"results":"21","hashOfConfig":"13"},{"size":5774,"mtime":1611430997834,"results":"22","hashOfConfig":"13"},{"size":6068,"mtime":1611430911663,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ukwcdz",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\App.tsx",["50"],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\reportWebVitals.ts",[],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\routes.tsx",[],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\index.tsx",[],["51","52"],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\services\\api.ts",[],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Login\\index.tsx",[],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\assets\\components\\PageHeader\\index.tsx",[],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\List\\index.tsx",["53","54","55"],"C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Create\\index.tsx",["56"],"import React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport { Link, Redirect} from 'react-router-dom'; \r\nimport swal from 'sweetalert';\r\n\r\nimport './style.css';\r\nimport api from '../../services/api';\r\nimport Pageheader from '../../assets/components/PageHeader';\r\n\r\nconst Create = () => {\r\n    const [created,setCreated] = useState<string>(\"\");\r\n    const [reqName, setName] = useState<string>(\"\");\r\n    const [reqInicialValue, setInitialValue] = useState<string>(\"\");\r\n    const [reqResponsible, setResponsible] = useState<string>(\"\");\r\n    const [reqUsed, setUsed] = useState<string>(\"\");\r\n    const [reqStartDate, setStartDate] = useState<string>(\"\");\r\n    const [reqEndDate, setEndDate] = useState<string>(\"\");\r\n\r\n    function handName(event: ChangeEvent<HTMLInputElement>) {\r\n        setName(event.target.value);\r\n    }\r\n    function handInitialValue(event: ChangeEvent<HTMLInputElement>) {\r\n        const final = event.target.value\r\n        .replace(/\\D/g,\"\") \r\n        .replace(/(\\d)(\\d{2})$/,\"$1,$2\")\r\n        .replace(/(?=(\\d{3})+(\\D))\\B/g,\".\"); \r\n        setInitialValue(final);\r\n    }\r\n    function handResponsible(event: ChangeEvent<HTMLInputElement>) {\r\n        setResponsible(event.target.value);\r\n    }\r\n    function handUsed(event: ChangeEvent<HTMLSelectElement>) {\r\n        setUsed(event.target.value);\r\n    }\r\n    function handStartDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setStartDate(event.target.value);\r\n    }\r\n    function handEndDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setEndDate(event.target.value);\r\n    }\r\n\r\n    async function handleSubmit(event: FormEvent) {\r\n        event.preventDefault();\r\n        const config = {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }\r\n\r\n        const data = {\r\n            \"name\":reqName,\r\n            \"initial_value\": reqInicialValue,\r\n            \"used\": reqUsed,\r\n            \"responsible\":reqResponsible,\r\n            \"start_date\":reqStartDate,\r\n            \"end_date\":reqEndDate,\r\n        }\r\n    \r\n        api.post('auctions', data , config).then(response => { \r\n            swal(\"Leilão cadastrado com Sucesso\");\r\n            setCreated('true');\r\n            \r\n        }).catch(response => {\r\n            \r\n            swal(\"Erro ao cadastrar leilão\",\"Preecha os campos corretamente\");\r\n        });   \r\n        \r\n    }\r\n\r\n    if(created == \"true\"){  \r\n        return(\r\n            <Redirect to={{pathname:'/list', state:{next: true}}} />\r\n        );\r\n    }\r\n    return (\r\n        <div id='page-create' className='container'>\r\n            <Pageheader title='Menu' />\r\n\r\n            <form onSubmit={handleSubmit} id='form-control'>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-name'>\r\n                        Nome do Leilão:\r\n                        </label>\r\n                    <input type=\"text\" id='input-name' value={reqName} onChange={handName} required />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-initial-value'>\r\n                        Valor Inicial:\r\n                        </label> \r\n                    <input type=\"text\" id='input-initial-value' value={reqInicialValue} onChange={handInitialValue} required placeholder='999.999,30'/>\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-responsible'>\r\n                        Responsável:\r\n                        </label>\r\n                    <input type=\"text\" id='input-responsible' value={reqResponsible} onChange={handResponsible} required />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-used'>\r\n                        É usado ?\r\n                    </label>\r\n                    <br />\r\n                    <select className='input-used'  value={reqUsed} onChange={handUsed} required>\r\n                        <option selected >Selecione</option> \r\n                        <option value=\"0\">Não</option> \r\n                        <option value=\"1\">Sim</option> \r\n                    </select>\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-start-date'>\r\n                        Data de Abertura\r\n                        </label>\r\n                    <input type=\"date\" id='input-start-date' value={reqStartDate} onChange={handStartDate} required/>\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-end-date'>\r\n                        Data de Finalização\r\n                        </label>\r\n                    <input type=\"date\" id='input-end-date' value={reqEndDate} onChange={handEndDate} required/>\r\n                </div>\r\n\r\n                <div className='buttons-container'>\r\n                    <button type='submit' className='alter-button'>\r\n                        Salvar\r\n                    </button>\r\n                    <Link to='/list' className='button-control cancel-button'>\r\n                        Cancelar\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Create;","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Edit\\index.tsx",["57","58"],"import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';\r\nimport { Link, useParams, Redirect } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\n\r\nimport './style.css';\r\nimport api from '../../services/api';\r\nimport Pageheader from '../../assets/components/PageHeader';\r\n\r\ninterface obgParams {\r\n    id: string\r\n}\r\nconst Edit = () => {\r\n\r\n    const [altered,setAltered] = useState<string>(\"\");\r\n    const [reqName, setName] = useState<string>(\"\");\r\n    const [reqInicialValue, setInitialValue] = useState<string>(\"\");\r\n    const [reqResponsible, setResponsible] = useState<string>(\"\");\r\n    const [reqUsed, setUsed] = useState<string>(\"\");\r\n    const [reqStartDate, setStartDate] = useState<string>(\"\");\r\n    const [reqEndDate, setEndDate] = useState<string>(\"\");\r\n\r\n    function handName(event: ChangeEvent<HTMLInputElement>) {\r\n        setName(event.target.value);\r\n    }\r\n    function handInitialValue(event: ChangeEvent<HTMLInputElement>) {\r\n        const final = event.target.value\r\n        .replace(/\\D/g,\"\") \r\n        .replace(/(\\d)(\\d{2})$/,\"$1,$2\")\r\n        .replace(/(?=(\\d{3})+(\\D))\\B/g,\".\"); \r\n        setInitialValue(final);\r\n    }\r\n    function handResponsible(event: ChangeEvent<HTMLInputElement>) {\r\n        setResponsible(event.target.value);\r\n    }\r\n    function handUsed(event: ChangeEvent<HTMLSelectElement>) {\r\n        setUsed(event.target.value);\r\n    }\r\n    function handStartDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setStartDate(event.target.value);\r\n    }\r\n    function handEndDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setEndDate(event.target.value);\r\n    }\r\n\r\n    const params: obgParams = useParams();\r\n\r\n    const config = {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        api.get('auctions/' + params.id, config).then(response => {\r\n            setName(response.data.auctions.name);\r\n            setInitialValue(response.data.auctions.initial_value);\r\n            setResponsible(response.data.auctions.responsible);\r\n            setUsed(response.data.auctions.used);\r\n            const start = response.data.auctions.start_date.split('T');\r\n            setStartDate(start[0]);\r\n            const end = response.data.auctions.end_date.split('T');\r\n            setEndDate(end[0]);\r\n        });\r\n    }, []);\r\n\r\n    async function handleSubmit(event: FormEvent) {\r\n        event.preventDefault();\r\n        \r\n        const data = {\r\n            \"name\":reqName,\r\n            \"initial_value\": reqInicialValue,\r\n            \"used\": reqUsed,\r\n            \"responsible\":reqResponsible,\r\n            \"start_date\":reqStartDate,\r\n            \"end_date\":reqEndDate,\r\n        }\r\n    \r\n        api.put('auctions/' + params.id, data , config).then(response => { \r\n            swal(\"Leilão alterado com Sucesso\");\r\n            setAltered('true');\r\n        }).catch(response => {\r\n            swal(\"Erro ao alterar leilão\",\"Preecha os campos corretamente\");\r\n        });\r\n    }\r\n\r\n    if(altered == \"true\"){\r\n        return(\r\n            <Redirect to={{pathname:'/list', state:{next: true}}} />\r\n        );\r\n    }\r\n    return (\r\n        <div id='page-edit' className='container'>\r\n            <Pageheader title='Menu' />\r\n\r\n            <form onSubmit={handleSubmit} id='form-control'>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-name'>\r\n                        Nome do Leilão:\r\n                        </label>\r\n                    <input type=\"text\" id='input-name' value={reqName} onChange={handName} />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-initial-value'>\r\n                        Valor Inicial:\r\n                        </label>\r\n                    <input type=\"text\" id='input-initial-value' value={reqInicialValue} onChange={handInitialValue} />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-responsible'>\r\n                        Responsável:\r\n                        </label>\r\n                    <input type=\"text\" id='input-responsible' value={reqResponsible} onChange={handResponsible} />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-used'>\r\n                        É usado ?\r\n                        </label>\r\n                    <br />\r\n                    <select className='input-used' value={reqUsed} onChange={handUsed}>\r\n                        <option value=\"0\">Não</option>\r\n                        <option value=\"1\">Sim</option>\r\n                    </select>\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-start-date'>\r\n                        Data de Abertura\r\n                        </label>\r\n                    <input type=\"date\" id='input-start-date' value={reqStartDate} onChange={handStartDate} />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-end-date'>\r\n                        Data de Finalização\r\n                        </label>\r\n                    <input type=\"date\" id='input-end-date' value={reqEndDate} onChange={handEndDate} />\r\n                </div>\r\n\r\n                <div className='buttons-container'>\r\n                <button type='submit' className='alter-button'>\r\n                        Salvar\r\n                    </button>\r\n                    <Link to='/list' className='button-control cancel-button'>\r\n                        Cancelar\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Edit;","C:\\Users\\kakak\\Desktop\\fullstack-challenge\\web\\src\\pages\\Delete\\index.tsx",["59","60"],"import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';\r\nimport { Link, useParams, Redirect } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\n\r\nimport './style.css';\r\nimport api from '../../services/api';\r\nimport Pageheader from '../../assets/components/PageHeader';\r\n\r\ninterface obgParams {\r\n    id: string\r\n}\r\nconst Delete = () => {\r\n\r\n    const [reqDeleted, setDeleted] = useState<string>(\"\");\r\n    const [reqName, setName] = useState<string>(\"\");\r\n    const [reqInicialValue, setInitialValue] = useState<string>(\"\");\r\n    const [reqResponsible, setResponsible] = useState<string>(\"\");\r\n    const [reqUsed, setUsed] = useState<string>(\"\");\r\n    const [reqStartDate, setStartDate] = useState<string>(\"\");\r\n    const [reqEndDate, setEndDate] = useState<string>(\"\");\r\n\r\n    function handName(event: ChangeEvent<HTMLInputElement>) {\r\n        setName(event.target.value);\r\n    }\r\n    function handInitialValue(event: ChangeEvent<HTMLInputElement>) {\r\n        const final = event.target.value\r\n        .replace(/\\D/g,\"\") \r\n        .replace(/(\\d)(\\d{2})$/,\"$1,$2\")\r\n        .replace(/(?=(\\d{3})+(\\D))\\B/g,\".\"); \r\n        setInitialValue(final);\r\n    }\r\n    function handResponsible(event: ChangeEvent<HTMLInputElement>) {\r\n        setResponsible(event.target.value);\r\n    }\r\n    function handUsed(event: ChangeEvent<HTMLSelectElement>) {\r\n        setUsed(event.target.value);\r\n    }\r\n    function handStartDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setStartDate(event.target.value);\r\n    }\r\n    function handEndDate(event: ChangeEvent<HTMLInputElement>) {\r\n        setEndDate(event.target.value);\r\n    }\r\n\r\n    const params: obgParams = useParams();\r\n\r\n    const config = {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        api.get('auctions/' + params.id, config).then(response => {\r\n            setName(response.data.auctions.name);\r\n            setInitialValue(response.data.auctions.initial_value);\r\n            setResponsible(response.data.auctions.responsible);\r\n            setUsed(response.data.auctions.used);\r\n            const start = response.data.auctions.start_date.split('T');\r\n            setStartDate(start[0]);\r\n            const end = response.data.auctions.end_date.split('T');\r\n            setEndDate(end[0]);\r\n        });\r\n    }, []);\r\n\r\n    async function handleSubmit(event: FormEvent) {\r\n        event.preventDefault();\r\n        swal({\r\n            title: \"Tem Certeza ?\",\r\n            text: \"Seu leilão será deletado!\",\r\n            icon: \"warning\", \r\n            dangerMode: true,\r\n          })\r\n          .then((willDelete) => {\r\n            if (willDelete) {\r\n                api.delete('auctions/'+ params.id, config).then(response => { \r\n                    swal(\"Leilão deletado com Sucesso\");\r\n                    setDeleted('true');   \r\n                }).catch(response => {\r\n                    swal(\"Erro ao deletar leilão\");\r\n                });\r\n                \r\n                swal(\"Leilão deletado com Sucesso\", {\r\n                icon: \"success\",\r\n              });\r\n            } else {\r\n              swal(\"Ufa, Seu leilão continua na lista\");\r\n            }\r\n          });\r\n    }\r\n\r\n    if(reqDeleted == \"true\"){  \r\n        return(\r\n            <Redirect to={{pathname:'/list', state:{next: true}}} />\r\n        );\r\n    }\r\n    return (\r\n        <div id='page-delete' className='container'>\r\n            <Pageheader title='Menu' />\r\n\r\n            <form onSubmit={handleSubmit} id='form-control'>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-name'>\r\n                        Nome do Leilão:\r\n                        </label>\r\n                    <input type=\"text\" id='input-name' value={reqName} onChange={handName} disabled />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-initial-value'>\r\n                        Valor Inicial:\r\n                        </label>\r\n                    <input type=\"text\" id='input-initial-value' value={reqInicialValue} onChange={handInitialValue} disabled />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-responsible'>\r\n                        Responsável:\r\n                        </label>\r\n                    <input type=\"text\" id='input-responsible' value={reqResponsible} onChange={handResponsible} disabled />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-used'>\r\n                        É usado ?\r\n                        </label>\r\n                    <br />\r\n                    <select className='input-used' value={reqUsed} onChange={handUsed} disabled>\r\n                        <option value=\"0\">Não</option>\r\n                        <option value=\"1\">Sim</option>\r\n                    </select>\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-start-date'>\r\n                        Data de Abertura\r\n                        </label>\r\n                    <input type=\"date\" id='input-start-date' value={reqStartDate} onChange={handStartDate} disabled />\r\n                </div>\r\n                <div className='input-form'>\r\n                    <label htmlFor='input-end-date'>\r\n                        Data de Finalização\r\n                        </label>\r\n                    <input type=\"date\" id='input-end-date' value={reqEndDate} onChange={handEndDate} disabled />\r\n                </div>\r\n\r\n                <div className='buttons-container'>\r\n                    <button type='submit' className='alter-button'>\r\n                        Deletar\r\n                    </button>\r\n                    <Link to='/list' className='button-control cancel-button'>\r\n                        Cancelar\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Delete;",{"ruleId":null,"fatal":true,"severity":2,"message":"61","line":6,"column":0},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":23,"column":11,"nodeType":"68","messageId":"69","endLine":23,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":37,"column":8,"nodeType":"72","endLine":37,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":57,"column":44,"nodeType":"76","messageId":"77","endLine":57,"endColumn":46},{"ruleId":"74","severity":1,"message":"75","line":69,"column":16,"nodeType":"76","messageId":"77","endLine":69,"endColumn":18},{"ruleId":"70","severity":1,"message":"78","line":65,"column":8,"nodeType":"72","endLine":65,"endColumn":10,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"75","line":87,"column":16,"nodeType":"76","messageId":"77","endLine":87,"endColumn":18},{"ruleId":"70","severity":1,"message":"78","line":65,"column":8,"nodeType":"72","endLine":65,"endColumn":10,"suggestions":"80"},{"ruleId":"74","severity":1,"message":"75","line":93,"column":19,"nodeType":"76","messageId":"77","endLine":93,"endColumn":21},"Parsing error: Declaration or statement expected.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'date' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.","ArrayExpression",["83"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'config' and 'params.id'. Either include them or remove the dependency array.",["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"88","fix":"90"},"Update the dependencies array to be: [config]",{"range":"91","text":"92"},"Update the dependencies array to be: [config, params.id]",{"range":"93","text":"94"},{"range":"95","text":"94"},[997,999],"[config]",[2379,2381],"[config, params.id]",[2385,2387]]